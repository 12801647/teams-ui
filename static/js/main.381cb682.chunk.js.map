{"version":3,"sources":["img/icon.png","Components/Navbar.js","Components/Pages/Login.js","Components/Pages/ForgotPw.js","Components/Pages/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","id","className","src","Icon","alt","Component","Login","state","showForgot","onLogin","document","getElementById","classList","remove","setTimeout","setState","onRegister","add","onForgot","this","TextField","required","label","defaultValue","type","onClick","vw","Math","max","documentElement","clientWidth","window","innerWidth","to","Chat","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.381cb682.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.b5d56f8d.png\";","import React, { Component } from \"react\";\n// import { Link } from \"react-router-dom\";\nimport \"./Navbar.scss\";\nimport Icon from \"../img/icon.png\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div id=\"navbar\">\n        <div className=\"nav\">\n          <img src={Icon} alt=\"Chat Bubble\"></img>\n          <div>Chat App test</div>\n        </div>\n\n        <div className=\"links\">\n          {/* <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Chat</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/register\">Register</Link>\n            </li>\n          </ul> */}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport \"./Login.scss\";\n\nclass Login extends Component {\n  state = {\n    showForgot: false,\n  };\n  onLogin = () => {\n    document.getElementById(\"container\").classList.remove(\"right-panel-active\");\n    setTimeout(() => {\n      this.setState({ showForgot: false });\n    }, 500);\n  };\n  onRegister = () => {\n    document.getElementById(\"container\").classList.add(\"right-panel-active\");\n    this.setState({ showForgot: false });\n  };\n  onForgot = () => {\n    document.getElementById(\"container\").classList.add(\"right-panel-active\");\n    this.setState({ showForgot: true });\n  };\n  render() {\n    return (\n      <div id=\"login\">\n        <div className=\"bg\" />\n        <div id=\"container\" className=\"login-container\">\n          {!this.state.showForgot ? (\n            <div className=\"form-container sign-up-container\">\n              <h1>Sign Up</h1>\n              <div className=\"input-wrap\">\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"Username\"\n                  defaultValue=\"\"\n                />\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"Email\"\n                  defaultValue=\"\"\n                />\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"Password\"\n                  type=\"password\"\n                  defaultValue=\"\"\n                />\n                <button className=\"ghost\">Register</button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"form-container sign-up-container forgot\">\n              <h1>Forgot Password</h1>\n              <div className=\"input-wrap\">\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"Email\"\n                  defaultValue=\"\"\n                />\n                <TextField\n                  required\n                  id=\"standard-required\"\n                  label=\"New Password\"\n                  type=\"password\"\n                  defaultValue=\"\"\n                />\n                <button className=\"ghost\">Change password</button>\n              </div>\n            </div>\n          )}\n\n          <div className=\"form-container sign-in-container\">\n            <h1>Sign In</h1>\n            <div className=\"input-wrap\">\n              <TextField\n                required\n                id=\"standard-required\"\n                label=\"Email\"\n                defaultValue=\"\"\n              />\n              <TextField\n                required\n                id=\"standard-required\"\n                label=\"Password\"\n                type=\"password\"\n                defaultValue=\"\"\n              />\n              <span onClick={this.onForgot}>Forgot Password?</span>\n              <button className=\"ghost\">Login</button>\n            </div>\n          </div>\n\n          <div className=\"overlay-container\">\n            <div className=\"overlay\">\n              <div className=\"overlay-panel overlay-left\">\n                <h1>\n                  {this.state.showForgot\n                    ? \"Remembered password?\"\n                    : \"Already have an account?\"}\n                </h1>\n                <button onClick={this.onLogin} className=\"ghost\">\n                  Sign In\n                </button>\n              </div>\n              <div className=\"overlay-panel overlay-right\">\n                <h1>Don't have an account?</h1>\n                <button onClick={this.onRegister} className=\"ghost\">\n                  Sign Up\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Link } from \"react-router-dom\";\nimport \"./ForgotPw.scss\";\n\nclass Login extends Component {\n  state = {\n    vw: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),\n  };\n  render() {\n    return (\n      <div id=\"forgotpw\">\n        {this.state.vw > 768 ? <div className=\"bg\" /> : null}\n\n        <div id=\"container\" className=\"login-container\">\n          <div className=\"form-container sign-up-container\">\n            <h1>Forgot Password</h1>\n            <div className=\"input-wrap\">\n              <TextField\n                required\n                id=\"standard-required\"\n                label=\"Email\"\n                defaultValue=\"\"\n              />\n              <TextField\n                required\n                id=\"standard-required\"\n                label=\"New Password\"\n                type=\"password\"\n                defaultValue=\"\"\n              />\n              <button className=\"ghost\">Change password</button>\n            </div>\n          </div>\n\n          <div className=\"overlay-container\">\n            <div className=\"overlay\">\n              <div className=\"overlay-panel overlay-left\">\n                <h1>Remembered password?</h1>\n                <Link to=\"/teams-ui\">\n                  <button className=\"ghost\">Sign In</button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"./Chat.scss\";\n\nclass Chat extends Component {\n  render() {\n    return (\n      <div id=\"chat\">\n        <h1>Chat</h1>\n      </div>\n    );\n  }\n};\n\nexport default Chat;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./Components/Navbar\";\n// import Home from \"./Components/Pages/Home\";\n// import Register from \"./Components/Pages/Register\";\nimport Login from \"./Components/Pages/Login\";\nimport ForgotPw from \"./Components/Pages/ForgotPw\";\nimport Chat from \"./Components/Pages/Chat\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/teams-ui\">\n              <Login />\n            </Route>\n            <Route path=\"/teams-ui/chat\">\n              <Chat />\n            </Route>\n            <Route path=\"/forgot-password\">\n              <ForgotPw />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './variables.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}