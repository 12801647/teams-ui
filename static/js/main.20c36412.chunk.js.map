{"version":3,"sources":["Components/Navbar.js","Components/Pages/Home.js","Components/Pages/Register.js","Components/Pages/Login.js","Components/Pages/Chat.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","id","className","src","alt","to","Component","Home","Register","Login","TextField","required","label","defaultValue","type","Chat","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8ZAkCeA,G,6KA5BX,OACE,yBAAKC,GAAG,UACN,yBAAKC,UAAU,OACb,yBAAKC,IAAI,eAAeC,IAAI,gBAC5B,0CAGF,yBAAKF,UAAU,SACb,4BACE,4BACE,kBAAC,IAAD,CAAMG,GAAG,KAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,SAAT,SAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,oB,GArBOC,cCSNC,G,6KARX,OACE,yBAAKN,GAAG,QACN,yC,GAJWK,cCUJE,G,6KARX,OACE,yBAAKP,GAAG,YACN,6C,GAJeK,c,QCqCRG,G,6KAlCX,OACE,yBAAKR,GAAG,SACN,yBAAKA,GAAG,YAAYC,UAAU,mBAC5B,yBAAKA,UAAU,oCACb,wCAGF,yBAAKA,UAAU,oCACb,uCACA,yBAAKA,UAAU,cACb,kBAACQ,EAAA,EAAD,CAAWC,UAAQ,EAACV,GAAG,oBAAoBW,MAAM,QAAQC,aAAa,KACtE,kBAACH,EAAA,EAAD,CAAWC,UAAQ,EAACV,GAAG,oBAAoBW,MAAM,WAAWE,KAAK,WAAWD,aAAa,KACzF,4BAAQX,UAAU,SAAlB,WAIJ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,8BACb,wDACA,4BAAQA,UAAU,SAAlB,YAEF,yBAAKA,UAAU,+BACb,sDACA,4BAAQA,UAAU,SAAlB,oB,GA1BII,cCSLS,G,6KARX,OACE,yBAAKd,GAAG,QACN,yC,GAJWK,cCiCJU,G,6KAxBX,OACE,yBAAKd,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,c,GAjBIZ,cCEEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.20c36412.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Navbar.scss\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <div id=\"navbar\">\n        <div className=\"nav\">\n          <img src=\"/favicon.ico\" alt=\"Chat Bubble\"></img>\n          <div>Chat App</div>\n        </div>\n\n        <div className=\"links\">\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/chat\">Chat</Link>\n            </li>\n            <li>\n              <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n              <Link to=\"/registry\">Register</Link>\n            </li>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport \"./Home.scss\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div id=\"home\">\n        <h1>Home</h1>\n      </div>\n    );\n  }\n};\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport \"./Register.scss\";\n\nclass Register extends Component {\n  render() {\n    return (\n      <div id=\"register\">\n        <h1>Register</h1>\n      </div>\n    );\n  }\n};\n\nexport default Register;\n","import React, { Component } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport \"./Login.scss\";\n\nclass Login extends Component {\n  render() {\n    return (\n      <div id=\"login\">\n        <div id=\"container\" className=\"login-container\">\n          <div className=\"form-container sign-up-container\">\n            <h1>Sign Up</h1>\n\n          </div>\n          <div className=\"form-container sign-in-container\">\n            <h1>Sign In</h1>\n            <div className=\"input-wrap\">\n              <TextField required id=\"standard-required\" label=\"Email\" defaultValue=\"\" />\n              <TextField required id=\"standard-required\" label=\"Password\" type=\"password\" defaultValue=\"\" />\n              <button className=\"ghost\">Login</button>\n            </div>\n          </div>\n\n          <div className=\"overlay-container\">\n            <div className=\"overlay\">\n              <div className=\"overlay-panel overlay-left\">\n                <h1>Already have an account?</h1>\n                <button className=\"ghost\">Sign In</button>\n              </div>\n              <div className=\"overlay-panel overlay-right\">\n                <h1>Don't have an account?</h1>\n                <button className=\"ghost\">Sign Up</button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default Login;\n","import React, { Component } from \"react\";\nimport \"./Chat.scss\";\n\nclass Chat extends Component {\n  render() {\n    return (\n      <div id=\"chat\">\n        <h1>Chat</h1>\n      </div>\n    );\n  }\n};\n\nexport default Chat;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport Navbar from \"./Components/Navbar\";\nimport Home from \"./Components/Pages/Home\";\nimport Register from \"./Components/Pages/Register\";\nimport Login from \"./Components/Pages/Login\";\nimport Chat from \"./Components/Pages/Chat\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Navbar />\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/register\">\n              <Register />\n            </Route>\n            <Route path=\"/chat\">\n              <Chat />\n            </Route>\n            <Route path=\"/login\">\n              <Login />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport './variables.scss'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}